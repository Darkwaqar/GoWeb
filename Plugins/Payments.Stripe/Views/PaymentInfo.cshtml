@using Nop.Plugin.Payments.Stripe.Models;
@model PaymentInfoModel
<style type="text/css">
    .StripeElement {
        background-color: white;
        height: 40px;
        padding: 10px 12px;
        border-radius: 4px;
        border: 1px solid transparent;
        box-shadow: 0 1px 3px 0 #e6ebf1;
        -webkit-transition: box-shadow 150ms ease;
        transition: box-shadow 150ms ease;
    }

    .StripeElement--focus {
        box-shadow: 0 1px 3px 0 #cfd7df;
    }

    .StripeElement--invalid {
        border-color: #fa755a;
    }

    .StripeElement--webkit-autofill {
        background-color: #fefde5 !important;
    }
</style>

<script>
    $(document).ready(function () {
        $.getScript('https://js.stripe.com/v3/', function () {
            var onePageCheckout = @Model.OnePageCheckoutEnabled.ToString().ToLower();
            var submitForm = false;
            $('.payment-info-next-step-button').attr('onclick', null);
            console.log('stripe loaded');
            // Create a Stripe client.
            var stripe = Stripe('@Model.PublishableKey');
            // Create an instance of Elements.
            var elements = stripe.elements();
            // Custom styling can be passed to options when creating an Element.
            // (Note that this demo uses a wider set of styles than the guide below.)
            var style = {
                base: {
                    color: '#32325d',
                    lineHeight: '18px',
                    fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
                    fontSmoothing: 'antialiased',
                    fontSize: '16px',
                    '::placeholder': {
                        color: '#aab7c4'
                    }
                },
                invalid: {
                    color: '#fa755a',
                    iconColor: '#fa755a'
                }
            };
            // Create an instance of the card Element.
            var card = elements.create('card', { style: style, value: { postalCode: '@Model.PostalCode' }, hidePostalCode: true });
            // Add an instance of the card Element into the `card-element` <div>.
            card.mount('#card-element');
            // Handle real-time validation errors from the card Element.
            card.addEventListener('change', function (event) {
                var displayError = document.getElementById('card-errors');
                if (event.error) {
                    displayError.textContent = event.error.message;
                } else {
                    displayError.textContent = '';
                }
            });
            // Submit the form with the token ID.
            function stripeTokenHandler(token) {
                console.log('token received', token.id);
                // Insert the token ID into the form so it gets submitted to the server
                $('#@Html.IdFor(model => model.StripeToken)').val(token.id);
                // Submit the form
                if (onePageCheckout) {
                    submitForm = false;
                    PaymentInfo.save();
                } else {
                    submitForm = true;
                }
            };

            function payWithCard(stripe, card, clientSecret) {
                stripe
                    .confirmCardPayment(clientSecret, {
                        payment_method: {
                            card: card
                        }
                    })
                    .then(function (result) {
                        if (result.error) {
                            // Inform the user if there was an error.
                            var errorElement = document.getElementById('card-errors');
                            errorElement.textContent = result.error.message;
                            setTimeout(function () {
                                errorElement.textContent = "";
                            }, 4000);
                            return false;
                        } else {
                            // The payment succeeded!
                            stripeTokenHandler(result.paymentIntent);
                        }
                    });
            };
            $('input.payment-info-next-step-button').on('click', function (data) {
                event.preventDefault();
                // Complete payment when the submit button is clicked
                payWithCard(stripe, card, '@Model.ClientSecret');
                if (!submitForm) {
                    return false;
                }
                else if (onePageCheckout) {
                    submitForm = false;
                    PaymentInfo.save();
                }
            });
        });
    });
</script>

@Html.HiddenFor(model => model.StripeToken)
@Html.HiddenFor(model => model.Errors)

<form action="/charge" method="post" id="payment-form">
    <div class="form-row">
        <label for="card-element">
            Credit or debit card
        </label>
        <div id="card-element">
            <!-- A Stripe Element will be inserted here. -->
        </div>

        <!-- Used to display form errors. -->
        <div id="card-errors" role="alert"></div>
    </div>

</form>