@** Copyright 2016 Seven Spikes Ltd. All rights reserved. (http://www.nop-templates.com)
    * http://www.nop-templates.com/t/licensinginfo
*@
@using SevenSpikes.Nop.Plugins.MegaMenu
@using SevenSpikes.Nop.Plugins.MegaMenu.Domain.Enums
@using SevenSpikes.Nop.Plugins.MegaMenu.Models

@using Nop.Core;
@using Nop.Core.Infrastructure;

@model MegaMenuWidgetModel
@{
    Html.AddCssFileParts("~/Plugins/SevenSpikes.Nop.Plugins.MegaMenu/Themes/" + Model.Theme + "/Content/MegaMenu.css");

    var supportRtl = ShouldUseRtlTheme();
    if (supportRtl)
    {
        Html.AddCssFileParts("~/Plugins/SevenSpikes.Nop.Plugins.MegaMenu/Themes/" + Model.Theme + "/Content/MegaMenu.rtl.css");
    }



    Html.AddScriptParts("~/Plugins/SevenSpikes.Core/Scripts/SevenSpikesExtensions.min.js");
    Html.AddScriptParts("~/Plugins/SevenSpikes.Nop.Plugins.MegaMenu/Scripts/MegaMenu.min.js");
}
@helper BuildMenuItem(MenuItemModel item)
{
    var hasSublist = item.SubItems.Count > 0;
    var hasSublistClass = hasSublist ? "has-sublist" : string.Empty;
    var withSubcategoriesClass = hasSublist ? "with-subcategories" : string.Empty;
    var itemUrl = Constants.PredefinedPageTypes.Contains(item.Type) ? Url.RouteUrl(item.Type.ToString()) : item.Url;

    if (item.CssClass == "Vendor")
    {
        @Html.Partial("_VendorMenu", item)

    }
    else if (item.CssClass == "Category")
    {
        @Html.Partial("_CategoryMenu", item)

    }
    else if (item.CssClass == "Brand")
    {
        @Html.Partial("_BrandMenu", item)

    }
    else if (item.CssClass == "Designer")
    {
        @Html.Partial("_DesignerMenu", item)
    }
    else
    {
        <li class="@item.CssClass @hasSublistClass">
            <a href="@itemUrl" class="@withSubcategoriesClass" title="@item.Title" @if (item.OpenInNewWindow) { <text> target="_blank" </text> }><span> @item.Title</span></a>
            <div class="dropdown categories fullWidth boxes-4">
                <div class="row-wrapper">
                    @if (hasSublist)
                    {
                        <div class="box">
                            <ul class="sublist">
                                <li class="back-button">
                                    <span>@T("SevenSpikes.MegaMenu.ResponsiveBackButton")</span>
                                </li>
                                @foreach (var subItem in item.SubItems)
                                {
                                    @BuildMenuItem(subItem)
                                }
                            </ul>
                        </div>
                    }
                </div>
                @Html.Widget(string.Format("mega_menu_categories_before_dropdown_end_{0}", item.Id))
            </div>

        </li>
    }
}
@foreach (var menu in Model.MegaMenus)
{
    List<MvcHtmlString> responsiveMenuItems = new List<MvcHtmlString>();

    <ul class="mega-menu @menu.CssClass"
        data-isRtlEnabled="@supportRtl.ToString().ToLowerInvariant()"
        data-enableClickForDropDown="@menu.ShowDropdownsOnClick.ToString().ToLowerInvariant()">
        @foreach (var item in menu.Items)
        {
            var shouldUseCatalogTemplate = (item.Type == MenuItemType.Categories && item.CatalogTemplate != CatalogTemplate.Simple);
            var shouldUseManufacturerTemplate = (item.Type == MenuItemType.Manufacturers && item.MaximumNumberOfEntities > 0 && item.CatalogTemplate != CatalogTemplate.Simple);
            var shouldUseVendorTemplate = (item.Type == MenuItemType.Vendors && item.MaximumNumberOfEntities > 0 && item.CatalogTemplate != CatalogTemplate.Simple);
            var shouldUseTopicTemplate = (item.Type == MenuItemType.Topics && item.MaximumNumberOfEntities > 0 && item.EntityId == 0);
            var shouldUseProductTagsTemplate = (item.Type == MenuItemType.ProductTags && item.MaximumNumberOfEntities > 0 && item.EntityId == 0);

            if (shouldUseCatalogTemplate)
            {
                MvcHtmlString menuItemHtml = Html.Action("GetCategoryTemplate", "MegaMenuCatalog", new { menuItem = item });

                @menuItemHtml

                var responsiveMenu = menuItemHtml;

                if (item.CatalogTemplate == CatalogTemplate.WithPictures)
                {
                    MenuItemModel responsiveMenuItem = (MenuItemModel)item.Clone();

                    responsiveMenuItem.CatalogTemplate = CatalogTemplate.List;

                    responsiveMenu = Html.Action("GetCategoryTemplate", "MegaMenuCatalog", new { menuItem = responsiveMenuItem, isResponsive = true });
                }

                responsiveMenuItems.Add(responsiveMenu);
            }
            else if (shouldUseManufacturerTemplate)
            {

                MvcHtmlString menuItemHtml = Html.Action("GetManufacturerTemplate", "MegaMenuCatalog", new { menuItem = item });

                @menuItemHtml

                var responsiveMenu = menuItemHtml;

                if (item.CatalogTemplate == CatalogTemplate.WithPictures)
                {
                    MenuItemModel responsiveMenuItem = (MenuItemModel)item.Clone();

                    responsiveMenuItem.CatalogTemplate = CatalogTemplate.List;

                    responsiveMenu = Html.Action("GetManufacturerTemplate", "MegaMenuCatalog", new { menuItem = responsiveMenuItem });
                }

                responsiveMenuItems.Add(responsiveMenu);
            }
            else if (shouldUseVendorTemplate)
            {

                MvcHtmlString menuItemHtml = Html.Action("GetVendorTemplate", "MegaMenuCatalog", new { menuItem = item });

                @menuItemHtml

                var responsiveMenu = menuItemHtml;

                if (item.CatalogTemplate == CatalogTemplate.WithPictures)
                {
                    MenuItemModel responsiveMenuItem = (MenuItemModel)item.Clone();

                    responsiveMenuItem.CatalogTemplate = CatalogTemplate.List;

                    responsiveMenu = Html.Action("GetVendorTemplate", "MegaMenuCatalog", new { menuItem = responsiveMenuItem });
                }

                responsiveMenuItems.Add(responsiveMenu);
            }
            else if (shouldUseTopicTemplate)
            {
                MvcHtmlString menuItemHtml = Html.Action("GetTopicTemplate", "MegaMenuCatalog", new { menuItem = item });
                responsiveMenuItems.Add(menuItemHtml);

                @menuItemHtml
            }
            else if (shouldUseProductTagsTemplate)
            {
                MvcHtmlString menuItemHtml = Html.Action("GetProductTagsTemplate", "MegaMenuCatalog", new { menuItem = item });
                responsiveMenuItems.Add(menuItemHtml);

                @menuItemHtml
            }
            else
            {
                var menuHelperResult = BuildMenuItem(item);
                MvcHtmlString menuItemHtml = MvcHtmlString.Create(menuHelperResult.ToHtmlString());
                responsiveMenuItems.Add(menuItemHtml);

                @menuItemHtml
            }
        }
        @Html.Widget("header_menu_after")
    </ul>

    @*<div class="menu-title"><span>@T("SevenSpikes.MegaMenu.ResponsiveMenuTitle")</span></div>*@

    <div class="side-nav menu-close">
        <table class="mobile-search">
            <tr>
                <td class="sr-box">Search</td>
                <td class="sr-btn">
                    <svg id="Icon_Search" data-name="Icon/Search" xmlns="http://www.w3.org/2000/svg" width="16.354" height="16.354" viewBox="0 0 16.354 16.354">
                        <g id="Ellipse_17_search" data-name="Ellipse 17 search" fill="none" stroke="currentColor" stroke-width="1">
                            <circle cx="6.5" cy="6.5" r="6.5" stroke="none"></circle>
                            <circle cx="6.5" cy="6.5" r="6" fill="none"></circle>
                        </g>
                        <line id="Line_116_search" data-name="Line 116 search" x2="5" y2="5" transform="translate(11 11)" fill="none" stroke="currentColor" stroke-width="1"></line>
                    </svg>
                </td>
            </tr>
        </table>
	@Html.Action("CurrencySelector", "Common")
        <ul class="mega-menu-responsive @menu.CssClass">
            @foreach (var responsiveMenuItem in responsiveMenuItems)
            {
                @responsiveMenuItem
            }
            @{
                var userEmail = EngineContext.Current.Resolve<IWorkContext>().CurrentCustomer.Email;
                if (userEmail == null)
                {
                    <li> <a href="/login" class="ico-login">Log In</a> </li>
                } else {
                    <li> <a href="/logout" class="ico-logout">Log out</a> </li>
                }
            }

            @Html.Widget("header_menu_after")
        </ul>
    </div>
}