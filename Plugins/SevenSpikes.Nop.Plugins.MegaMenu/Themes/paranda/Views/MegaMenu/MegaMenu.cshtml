@** Copyright 2016 Seven Spikes Ltd. All rights reserved. (http://www.nop-templates.com)
    * http://www.nop-templates.com/t/licensinginfo
*@

@using SevenSpikes.Nop.Plugins.MegaMenu
@using SevenSpikes.Nop.Plugins.MegaMenu.Domain.Enums
@using SevenSpikes.Nop.Plugins.MegaMenu.Models

@model MegaMenuWidgetModel

@using Nop.Core;
@using Nop.Core.Infrastructure;
@using Nop.Services.Customers;

@{
    var userFullName = EngineContext.Current.Resolve<IWorkContext>().CurrentCustomer.FormatUserName();
    Html.AddCssFileParts("~/Plugins/SevenSpikes.Nop.Plugins.MegaMenu/Themes/" + Model.Theme + "/Content/MegaMenu.css");

    var supportRtl = ShouldUseRtlTheme();
    if (supportRtl)
    {
        Html.AddCssFileParts("~/Plugins/SevenSpikes.Nop.Plugins.MegaMenu/Themes/" + Model.Theme + "/Content/MegaMenu.rtl.css");
    }

    Html.AddScriptParts("~/Plugins/SevenSpikes.Core/Scripts/SevenSpikesExtensions.min.js");
    Html.AddScriptParts("~/Plugins/SevenSpikes.Nop.Plugins.MegaMenu/Scripts/MegaMenu.min.js");
}

@helper BuildMenuItem(MenuItemModel item)
{
    var hasSublist = item.SubItems.Count > 0;
    var hasSublistClass = hasSublist ? "has-sublist" : string.Empty;
    var withSubcategoriesClass = hasSublist ? "with-subcategories" : string.Empty;
    var itemUrl = Constants.PredefinedPageTypes.Contains(item.Type) ? Url.RouteUrl(item.Type.ToString()) : item.Url;

    <li class="@item.CssClass @hasSublistClass">
        
        <a href="@itemUrl" class="@withSubcategoriesClass" title="@item.Title" @if (item.OpenInNewWindow) { <text> target="_blank" </text>}><span> @item.Title</span></a>
        @if (hasSublist)
        {
            <div class="plus-button"></div>
            <div class="sublist-wrap">
                <ul class="sublist">
                    <li class="back-button">
                        <span>@T("SevenSpikes.MegaMenu.ResponsiveBackButton")</span>
                    </li>
                    @foreach (var subItem in item.SubItems)
                    {
                        @BuildMenuItem(subItem)
                    }
                </ul>
            </div>
        }
    </li>
}

@foreach (var menu in Model.MegaMenus)
{
    List<MvcHtmlString> responsiveMenuItems = new List<MvcHtmlString>();

    <ul class="mega-menu @menu.CssClass"
        data-isRtlEnabled="@supportRtl.ToString().ToLowerInvariant()"
        data-enableClickForDropDown="@menu.ShowDropdownsOnClick.ToString().ToLowerInvariant()">
        @foreach (var item in menu.Items)
        {
            var shouldUseCatalogTemplate = (item.Type == MenuItemType.Categories && item.CatalogTemplate != CatalogTemplate.Simple);
            var shouldUseManufacturerTemplate = (item.Type == MenuItemType.Manufacturers && item.MaximumNumberOfEntities > 0 && item.CatalogTemplate != CatalogTemplate.Simple);
            var shouldUseVendorTemplate = (item.Type == MenuItemType.Vendors && item.MaximumNumberOfEntities > 0 && item.CatalogTemplate != CatalogTemplate.Simple);
            var shouldUseTopicTemplate = (item.Type == MenuItemType.Topics && item.MaximumNumberOfEntities > 0 && item.EntityId == 0);
            var shouldUseProductTagsTemplate = (item.Type == MenuItemType.ProductTags && item.MaximumNumberOfEntities > 0 && item.EntityId == 0);

            if (shouldUseCatalogTemplate)
            {
                MvcHtmlString menuItemHtml = Html.Action("GetCategoryTemplate", "MegaMenuCatalog", new { menuItem = item });

                @menuItemHtml

                var responsiveMenu = menuItemHtml;

                if (item.CatalogTemplate == CatalogTemplate.WithPictures)
                {
                    MenuItemModel responsiveMenuItem = (MenuItemModel)item.Clone();

                    responsiveMenuItem.CatalogTemplate = CatalogTemplate.List;

                    responsiveMenu = Html.Action("GetCategoryTemplate", "MegaMenuCatalog", new { menuItem = responsiveMenuItem, isResponsive = true });
                }

                responsiveMenuItems.Add(responsiveMenu);
            }
            else if (shouldUseManufacturerTemplate)
            {

                MvcHtmlString menuItemHtml = Html.Action("GetManufacturerTemplate", "MegaMenuCatalog", new { menuItem = item });

                @menuItemHtml

                var responsiveMenu = menuItemHtml;

                if (item.CatalogTemplate == CatalogTemplate.WithPictures)
                {
                    MenuItemModel responsiveMenuItem = (MenuItemModel)item.Clone();

                    responsiveMenuItem.CatalogTemplate = CatalogTemplate.List;

                    responsiveMenu = Html.Action("GetManufacturerTemplate", "MegaMenuCatalog", new { menuItem = responsiveMenuItem });
                }

                responsiveMenuItems.Add(responsiveMenu);
            }
            else if (shouldUseVendorTemplate)
            {

                MvcHtmlString menuItemHtml = Html.Action("GetVendorTemplate", "MegaMenuCatalog", new { menuItem = item });

                @menuItemHtml

                var responsiveMenu = menuItemHtml;

                if (item.CatalogTemplate == CatalogTemplate.WithPictures)
                {
                    MenuItemModel responsiveMenuItem = (MenuItemModel)item.Clone();

                    responsiveMenuItem.CatalogTemplate = CatalogTemplate.List;

                    responsiveMenu = Html.Action("GetVendorTemplate", "MegaMenuCatalog", new { menuItem = responsiveMenuItem });
                }

                responsiveMenuItems.Add(responsiveMenu);
            }
            else if (shouldUseTopicTemplate)
            {
                MvcHtmlString menuItemHtml = Html.Action("GetTopicTemplate", "MegaMenuCatalog", new { menuItem = item });
                responsiveMenuItems.Add(menuItemHtml);

                @menuItemHtml
            }
            else if (shouldUseProductTagsTemplate)
            {
                MvcHtmlString menuItemHtml = Html.Action("GetProductTagsTemplate", "MegaMenuCatalog", new { menuItem = item });
                responsiveMenuItems.Add(menuItemHtml);

                @menuItemHtml
            }
            else
            {
                var menuHelperResult = BuildMenuItem(item);
                MvcHtmlString menuItemHtml = MvcHtmlString.Create(menuHelperResult.ToHtmlString());
                responsiveMenuItems.Add(menuItemHtml);

                @menuItemHtml
            }
        }

        @Html.Widget("header_menu_after")
    </ul>

  @*  <div class="menu-title"><span>@T("SevenSpikes.MegaMenu.ResponsiveMenuTitle")</span></div>
    <ul class="mega-menu-responsive @menu.CssClass">
        @foreach (var responsiveMenuItem in responsiveMenuItems)
        {
            @responsiveMenuItem
        }
        @Html.Widget("header_menu_after")
    </ul>*@

 <div class="@menu.CssClass" id="mySidenav" 
      style=" height: 95vh; width: 0%;  z-index: 2; position: fixed; transition: all 0.7s ease 0s; visibility:hidden;
        border-bottom: 1px solid rgb(0, 0, 0); background-color: rgb(255, 255, 255) !important; ">
 	
	<div id="menutopDiv" style="width:100%; background-color: #555; height: 69px; display: none;">
            <a style=" font-size: 45px; float: right; margin-right: 5%; color:#000;"
               href="javascript:void(0)" class="closebtn" onclick="closeNav()">
                &times;
            </a>
             @if (User.Identity.IsAuthenticated)
            {
                <p style="padding: 10px; float: left; margin: 14px 23px; color: #fff;">
                    <a href="/logout" style="color: #fff;">Sign Out</a>
                        &nbsp;/&nbsp;
                    @if (userFullName != null)
                    {
                        <a href="/customer/info" style="color: #fff; text-transform: capitalize;">@userFullName</a>
                    }
                </p>                
            }
            else{
                <p style="padding: 10px; float: left; margin: 14px 23px; color: #fff;">
                    <a href="/login" style="color: #fff;">Log In</a>
                    &nbsp;/&nbsp;
                    <a href="/register" style="color: #fff;">Sign Up</a>
                </p>
            }
        </div>

       @* <a style=" margin-left: 93%; font-size: 40px;" href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a>*@
	<div style="height:80%;overflow-y:scroll;">
        <ul class="mega-menu-responsive @menu.CssClass" style="display: block;">
            @foreach (var responsiveMenuItem in responsiveMenuItems)
            {
                @responsiveMenuItem
            }
            @Html.Widget("header_menu_after")
        </ul>
	</div>
    </div>

}