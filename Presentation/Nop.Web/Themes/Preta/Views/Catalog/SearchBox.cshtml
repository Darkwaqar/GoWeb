@model SearchBoxModel
@using Nop.Web.Models.Catalog;
@*<div class="mf-expand__content" id="SeachDiv" data-mf-extarget="globalHeaderSearch" style="display:none">
    <a onclick="SeachToggle()" class="mf-expand__handle--close search__close">Close</a>
    <div class="mf-expand__content" id="SeachDiv" data-mf-extarget="globalHeaderSearch" style="display:none">
        <a onclick="SeachToggle()" class="mf-expand__handle--close search__close">Close</a>

        <input id="query" type="hidden" name="text" value="">
        <div class="header-search">
            <div class="header-search__label cr" style="display: block; z-index: 1;">
                <div class="header-search__label__center">
                    <input id="Womens" type="radio" name="gender" value="Womens" checked="checked">
                    <label for="Womens" class="gender__label__description">WOMEN</label>
                    <input id="Mens" type="radio" name="gender" value="Mens">
                    <label for="Mens" class="gender__label__description">MEN</label>
                </div>
            </div>
            <input id="search" class="header-search__input" type="text" name="text" value="" maxlength="100" placeholder=" I'm looking for" data-options="{&quot;autocompleteUrl&quot; : &quot;/search/autocomplete/SearchBoxComponent&quot;,&quot;minCharactersBeforeRequest&quot; : &quot;3&quot;,&quot;waitTimeBeforeRequest&quot; : &quot;500&quot;,&quot;displayProductImages&quot; : true}" autocomplete="off">
            <button id="searchSubmit" class="header-search__button" type="submit"></button>
        </div>
        @using (Html.BeginRouteForm("ProductSearch", FormMethod.Get, new { id = "small-search-box-form" }))
        {
            <input type="text" class="search-box-text" id="small-searchterms" autocomplete="off" name="q" placeholder="@T("Search.SearchBox.Tooltip")" />
            @Html.Widget("searchbox_before_search_button")
            <input type="submit" class="button-1 search-box-button" value="@T("Search.Button")" />
            if (Model.SearchTermMinimumLength > 0)
            {
                <script type="text/javascript">
            $("#small-search-box-form").submit(function(event) {
                if ($("#small-searchterms").val() == "") {
                    alert('@Html.Raw(HttpUtility.JavaScriptStringEncode(T("Search.EnterSearchTerms").Text))');
                    $("#small-searchterms").focus();
                    event.preventDefault();
                }
            });
                </script>
            }
            if (Model.AutoCompleteEnabled)
            {
                <text>
                    <script type="text/javascript">
                $(document).ready(function() {
                    $('#small-searchterms').autocomplete({
                            delay: 500,
                            minLength: @(Model.SearchTermMinimumLength.ToString()),
                            source: '@(Url.RouteUrl("ProductSearchAutoComplete"))',
                            appendTo: '.search-box',
                            select: function(event, ui) {
                                $("#small-searchterms").val(ui.item.label);
                                setLocation(ui.item.producturl);
                                return false;
                            }
                        })
                        .data("ui-autocomplete")._renderItem = function(ul, item) {
                            var t = item.label;
                            //html encode
                            t = htmlEncode(t);
                            return $("<li></li>")
                                .data("item.autocomplete", item)
                                .append("<a>@(Model.ShowProductImagesInSearchAutoComplete ? Html.Raw("<img src='\" + item.productpictureurl + \"'>") : null)<span>" + t + "</span></a>")
                                .appendTo(ul);
                        };
                });
                    </script>
                </text>
            }
            @Html.Widget("searchbox")
        }
    </div>
</div>*@



<div class="mf-expand__content" id="SeachDiv" data-mf-extarget="globalHeaderSearch" style="display:none">

    <a onclick="SeachToggle()" class="mf-expand__handle--close search__close">Close</a>
    @using (Html.BeginRouteForm("ProductSearch", FormMethod.Get, new { id = "small-search-box-form" }))
    {
        
            @Html.Widget("searchbox_before_search_button")
        if (Model.SearchTermMinimumLength > 0)
        {
            <script type="text/javascript">
            $("#small-search-box-form").submit(function(event) {
                if ($("#small-searchterms").val() == "") {
                    alert('@Html.Raw(HttpUtility.JavaScriptStringEncode(T("Search.EnterSearchTerms").Text))');
                    $("#small-searchterms").focus();
                    event.preventDefault();
                }
            });
            </script>
        }
        if (Model.AutoCompleteEnabled)
        {
            <text>
                <script type="text/javascript">
                $(document).ready(function() {
                    $('#small-searchterms').autocomplete({
                            delay: 500,
                            minLength: @(Model.SearchTermMinimumLength.ToString()),
                            source: '@(Url.RouteUrl("ProductSearchAutoComplete"))',
                            appendTo: '.search-box',
                            select: function(event, ui) {
                                $("#small-searchterms").val(ui.item.label);
                                setLocation(ui.item.producturl);
                                return false;
                            }
                        })
                        .data("ui-autocomplete")._renderItem = function(ul, item) {
                            var t = item.label;
                            //html encode
                            t = htmlEncode(t);
                            return $("<li></li>")
                                .data("item.autocomplete", item)
                                .append("<a>@(Model.ShowProductImagesInSearchAutoComplete ? Html.Raw("<img src='\" + item.productpictureurl + \"'>") : null)<span>" + t + "</span></a>")
                                .appendTo(ul);
                        };
                });
                </script>
            </text>
        }
        @Html.Widget("searchbox")
        <input id="query" type="hidden" name="text" value="">

        <div class="header-search">
            <div class="header-search__label cr" style="display: block; z-index: 1;">
                <div class="header-search__label__center">
                    <input id="Womens" type="radio" name="gender" value="Womens" checked="checked">
                    <label for="Womens" class="gender__label__description">WOMEN</label>
                    <input id="Mens" type="radio" name="gender" value="Mens">
                    <label for="Mens" class="gender__label__description">MEN</label>
                </div>
            </div>
            <input type="text" class="header-search__input" id="small-searchterms" autocomplete="off" name="q" placeholder="@T("Search.SearchBox.Tooltip")" />
            <button id="searchSubmit" class="header-search__button" type="submit"></button>
        </div>
    }
       
</div>
