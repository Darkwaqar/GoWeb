


@model VendorModel
@using Nop.Services.Vendors;
@using Nop.Services.Media;
@using Nop.Services.Catalog;
@using Nop.Core.Domain.Common;
@using Nop.Core.Domain.Seo;
@using Nop.Core.Infrastructure;
@using Nop.Web.Models.Catalog;

@{
    /**/

    Layout = "~/Views/Shared/_MyColumns.cshtml";

    //title
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-vendor-page");

    var canonicalUrlsEnabled = EngineContext.Current.Resolve<SeoSettings>().CanonicalUrlsEnabled;
    if (canonicalUrlsEnabled)
    {
        var vendorUrl = Url.RouteUrl("Vendor", new { SeName = Model.SeName }, this.Request.Url.Scheme);
        Html.AddCanonicalUrlParts(vendorUrl);
    }

    var Vendor = EngineContext.Current.Resolve<IVendorService>().GetVendorById(Model.Id);
    var MapCategory = EngineContext.Current.Resolve<ICategoryService>().GetCategoryById(Vendor.MapedCatagory);
    var breadcrumbDelimiter = EngineContext.Current.Resolve<CommonSettings>().BreadcrumbDelimiter;
}
@{
    // Shows the range of products for pagination.
    // @productRange displays nothing if there are no products in the category
    // For example: 31 products, 10 per page (4 pages)
    // page1: (Products 1-10 of 31)
    // page2: (Products 11-20 of 31)
    // page3: (Products 21-30 of 31)
    // page4: (Product 31 of 31)

    string productRange = string.Empty;

    // ensure there are products
    if (Model.PagingFilteringContext.TotalItems > 0)
    {
        int firstProduct = 0;
        int lastProduct = 0;

        // first product number
        // first page
        if (Model.PagingFilteringContext.PageNumber == 1)
        {
            firstProduct = 1;
        }
        // other pages
        else
        {
            firstProduct = (Model.PagingFilteringContext.PageNumber - 1) *
                            Model.PagingFilteringContext.PageSize + 1;
        }

        // last product number
        // last page (also if there is only one page)
        if (Model.PagingFilteringContext.TotalPages == Model.PagingFilteringContext.PageNumber)
        {
            // on the last page, the last product is the count of items
            lastProduct = Model.PagingFilteringContext.TotalItems;
        }
        else
        {
            // on the first page, the last product is the page size
            if (Model.PagingFilteringContext.PageNumber == 1)
            {
                lastProduct = Model.PagingFilteringContext.PageSize;
            }
            // for other pages, the last product is pageNumber x pageSize
            else
            {
                lastProduct = Model.PagingFilteringContext.PageNumber *
                              Model.PagingFilteringContext.PageSize;
            }
        }

        // use different text if there is only one product on the page
        if (firstProduct == lastProduct)
        {
            productRange = String.Format("{0} Items", 
                Model.PagingFilteringContext.TotalItems);
        }
        else
        {
            productRange = String.Format("{0} Items", 
                Model.PagingFilteringContext.TotalItems);
        }
    }

}
















@*@Html.Widget("vendordetails_top", Model.Id)*@


<div class="page vendor-page">
    <div class="page-body ">
        <div class="row">
            <div class="col-md-12">
                <div class="vendor-header hidden-xs" style="background-image:url(@(Vendor.ShopBanner != 0 ? EngineContext.Current.Resolve<IPictureService>().GetPictureUrl(Vendor.ShopBanner)  : ""))">
                    <div class="vendor-logo">
                        <img src="@(EngineContext.Current.Resolve<IPictureService>().GetPictureUrl(Vendor.PictureId))" />
                    </div>

                </div>

                <div class="vendor-header visible-xs" style="background-image:url(@(Vendor.CoverPictureId != 0 ? EngineContext.Current.Resolve<IPictureService>().GetPictureUrl(Vendor.CoverPictureId)  : ""))">
                    <div class="vendor-logo">
                        <img src="@(EngineContext.Current.Resolve<IPictureService>().GetPictureUrl(Vendor.PictureId))" />
                    </div>

                </div>





                <div class="vendor-menu">


                    @Html.Partial("_VendorCategories", Model.Id)
                </div>
            </div>
        </div>

    





        <div class="row">
            <div class="col-md-3">
                <div class="vendor-description">
                    @*<h3 class="title">@Model.Name</h3>*@
                    <div class="description">
                        @if (!String.IsNullOrWhiteSpace(Model.Description))
                        {
                            @Html.Raw(Model.Description)
                        }
                    </div>
                    @if (Model.AllowCustomersToContactVendors)
                    {
                        <div class="vendor-contact">
                            <input type="button" value="Ask Seller" class="button-2 contact-vendor-button" onclick="setLocation('@Url.RouteUrl("ContactVendor", new { vendorId = Model.Id })')" />
                        </div>
                    }

                    @*@Html.Partial("_LeftColumns")*@



                    @Html.Action("VendorSubsriptionBox", "Newsletter", Model.Id)
                    @Html.Action("VendorRating", "Vendor", Model.Id)


                </div>

                @Html.Widget("left_side_column_before")
                @*@Html.Partial("_LeftColumns")*@

            </div>
            <div class="col-md-9">



                @if (Vendor.MapedCatagory != 0)
                {
                    <div class="breadcrumb">
                        <ul>
                            <li>
                                <a href="@Url.RouteUrl("HomePage")" title="@T("Categories.Breadcrumb.Top")">@T("Categories.Breadcrumb.Top")</a>
                                <span class="delimiter"> </span>
                            </li>
                            @*@foreach (var cat in Model.CategoryBreadcrumb)
                    {
                        var isLastCategory = cat.Id == Model.Id;*@
                            <li>

                                <strong class="current-item">@MapCategory.Name</strong>

                            </li>
                            @*}*@
                        </ul>
                    </div>
                    @Html.Widget("categorydetails_after_breadcrumb", Model.Id)
                }





                <div class="head-select">

                    <div class="product-Range">
                        @productRange
                    </div>
                    @if (Model.Products.Count > 0)
                    {
                        @Html.Partial("_CatalogSelectors", Model.PagingFilteringContext, new ViewDataDictionary())
                    }
                    @*product list*@




                </div>



                <div class="product-filters">
                    @*filtering*@
                    @if (Model.PagingFilteringContext.PriceRangeFilter.Enabled)
                    {
                        @Html.Partial("_FilterPriceBox", Model.PagingFilteringContext.PriceRangeFilter, new ViewDataDictionary())
                    }
                    @*filtering*@
                    @if (Model.PagingFilteringContext.SpecificationFilter.Enabled)
                    {
                        @Html.Partial("_FilterSpecsBox", Model.PagingFilteringContext.SpecificationFilter, new ViewDataDictionary())
                    }
                </div>


                @if (Model.Products.Count > 0)
                {
                    <div class="@(Model.PagingFilteringContext.ViewMode == "list" ? "product-list" : "product-grid") ">
                        <div class="item-grid">
                            @foreach (var product in Model.Products)
                            {
                                <div class="item-box">
                                    @Html.Partial("_ProductBox", product)
                                </div>
                            }
                        </div>
                    </div>
                }






                @{
                    var pager = Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber");




                    @*<div class="pager">
                @Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber")

            </div>*@
                }



                @if (!pager.IsEmpty())
                {
                    <div class="pager">
                        @pager


                    </div>
                }
                @Html.Widget("vendordetails_bottom", Model.Id)


            </div>

        </div>







    </div>

</div>

