@model ProductDetailsModel.ProductPriceModel
@using Nop.Core
@using Nop.Core.Domain.Tax
@using Nop.Services.Vendors
@using Nop.Services.Catalog
@using Nop.Core.Infrastructure
@using Nop.Web.Models.Catalog;

@{ 
    var product = EngineContext.Current.Resolve<IProductService>
       ().GetProductById(Model.ProductId);
}

    @if (!Model.CustomerEntersPrice)
    {
        <div class="prices" itemprop="offers" itemscope itemtype="http://schema.org/Offer">
            @if (Model.CallForPrice)
            {
                @*call for price*@
            <div class="product-price call-for-price" id="product-price">




                @if (product.VendorId != null)
                {


                    var vendor = EngineContext.Current.Resolve<IVendorService>().GetVendorById(product.VendorId);
                <a href="" class="custom-price"><i class="fa fa-whatsapp"></i> @T("Products.customPrice")</a>
                <a href="#" class="custom-price"> Request an appointment</a>
                <a href="#" class="clink">Instant Chat</a>


                }
                else
                {


                <a href="" class="custom-price"><i class="fa fa-whatsapp"></i> @T("Products.customPrice")</a>



                }




                <span></span>
            </div>
            }
            else
            {
                if (Model.IsRental)
                {
                    <div class="font-24 u-case s-fontstyle color-defult">
                        <label>@T("Products.Price.RentalPrice"):</label>
                        <span>@Model.RentalPrice</span>
                    </div>
                }
                if (!String.IsNullOrWhiteSpace(Model.OldPrice))
                {
                    @*old price*@
                    <div class="old-product-price font-24 u-case s-fontstyle color-defult">
                        <label>@T("Products.Price.OldPrice"):</label>
                        <span>@Model.OldPrice</span>
                    </div>
                }
                <div class="@if (String.IsNullOrWhiteSpace(Model.PriceWithDiscount))
                        {
                            <text>product-price</text>
                        }
                        else
                        {
                            <text>non-discounted-price</text>
                        }">
                    @if (!String.IsNullOrWhiteSpace(Model.OldPrice) || !String.IsNullOrWhiteSpace(Model.PriceWithDiscount))
                    {
                        @*display "Price:" label if we have old price or discounted one*@
                        <label>@T("Products.Price"):</label>
                    }
                    @*render price*@<span @if (String.IsNullOrWhiteSpace(Model.PriceWithDiscount)) { <text> itemprop="price" content="@Model.PriceValue.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)" class="price-value-@(Model.ProductId)" </text>  }>
                        @Html.Raw(Model.Price)
                    </span>
                </div>
                if (!String.IsNullOrWhiteSpace(Model.PriceWithDiscount))
                {
                    @*discounted price*@
                    <div class="product-price discounted-price">
                        <label>@T("Products.Price.WithDiscount"):</label>
                        <span itemprop="price" content="@Model.PriceValue.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)" class="price-value-@(Model.ProductId)">
                            @Html.Raw(Model.PriceWithDiscount)
                        </span>
                    </div>
                }
                if (!String.IsNullOrEmpty(Model.BasePricePAngV))
                {
                    <div class="base-price-pangv">
                        @Model.BasePricePAngV
                    </div>
                }
                if (Model.DisplayTaxShippingInfo)
                {
                    var inclTax = EngineContext.Current.Resolve<IWorkContext>().TaxDisplayType == TaxDisplayType.IncludingTax;
                    //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                    //of course, you can modify appropriate locales to include VAT info there
                    <div class="tax-shipping-info">
                        @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                    </div>
                }
                if (!String.IsNullOrEmpty(Model.CurrencyCode))
                {
                    <meta itemprop="priceCurrency" content="@Model.CurrencyCode" />
                }
            }
        </div>
    }
