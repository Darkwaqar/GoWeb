@model LoginModel
@using Nop.Web.Models.Customer;
@using Nop.Core;
@using Nop.Core.Infrastructure;
@{
    Layout = "~/Views/Shared/_Root.Head.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Login").Text);
    //page class
    Html.AppendPageCssClassParts("html-login-page");

    //register URL with return URL (if specified)
    var registerUrl = Url.RouteUrl("Register");
    if (!String.IsNullOrEmpty(this.Context.Request.QueryString["returnUrl"]))
    {
        var webHelper = EngineContext.Current.Resolve<IWebHelper>();
        registerUrl = webHelper.ModifyQueryString(registerUrl, "returnurl=" + HttpUtility.UrlEncode(this.Context.Request.QueryString["returnUrl"]), null);
    }
}
<div class="page registration-page">
    <div class="header-inner ">
        <div class="logo-placeholder">
            <a class="home-main" href="/">
                <span class="logo"></span>
            </a>
        </div>
    </div>
    <div class="page-title" style="text-align: center;">
            <h1>@T("Account.Login.Welcome")</h1>
        </div>
    <div class="page-body">
            <div class="col-md-6">
                <div class="register opc">
                    @Html.Partial("_ExternalAuthentication.AssociateMessage")
                    @Html.Partial("_ExternalAuthentication.Errors")
                    <div class="page-body">
                        <div class="title" style="text-align: center;">
                            <h1 style="font-family: 'Playfair Display', serif;text-transform: uppercase;">Partner App Login</h1>
                        </div>
                        <div class="customer-blocks">
                            <div class="returning-wrapper fieldset">
                                @using (Html.BeginForm())
                                {
                                    @Html.AntiForgeryToken()
                                    var validationSummary1 = Html.ValidationSummary(true, T("Account.Login.Unsuccessful").Text);
                                if (!MvcHtmlString.IsNullOrEmpty(validationSummary1))
                                {
                                    <div class="message-error">@validationSummary1</div>
                                }
                                <div class="form-fields">
                                    @if (Model.UsernamesEnabled)
                                    {
                                        <div class="input-field">
                                            @Html.LabelFor(m => m.Username, new { }, ":")
                                            @Html.TextBoxFor(m => m.Username, new { @class = "username", autofocus = "autofocus" })
                                            @Html.ValidationMessageFor(m => m.Username)
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="input-field">
                                            @Html.LabelFor(m => m.Email, new { }, ":")
                                            @Html.TextBoxFor(m => m.Email, new { @class = "email", autofocus = "autofocus" })
                                            @Html.ValidationMessageFor(m => m.Email)
                                        </div>
                                    }
                                    <div class="input-field">
                                        @Html.LabelFor(m => m.Password, new { }, ":")
                                        @Html.PasswordFor(m => m.Password, new { @class = "password" })
                                        @Html.ValidationMessageFor(m => m.Password)
                                    </div>
                                    <div class="inputs reversed">
                                        @Html.CheckBoxFor(m => m.RememberMe)
                                        @Html.LabelFor(m => m.RememberMe)
                                    </div>
                                    @if (Model.DisplayCaptcha)
                                    {
                                        <div class="captcha-box">
                                            @Html.Raw(Html.GenerateCaptcha())
                                        </div>
                                    }
                                </div>
                                        <div class="buttons">
                                            <input class="button-1 login-button" type="submit" value="@T("Account.Login.LoginButton")" />
                                        </div>
                                }
                            </div>
                        </div>
                        <div class="external-authentication">
                            @Html.Action("ExternalMethods", "ExternalAuthentication")
                        </div>
                    </div>
                </div>
            </div>
    </div>
</div>

