@model WishlistModel
@using Nop.Core
@using Nop.Core.Domain.Tax
@using Nop.Core.Infrastructure
@using Nop.Web.Models.ShoppingCart;
@{
    var webHelper = EngineContext.Current.Resolve<IWebHelper>();
}
<div class="wishlist-summary-content" id="wishlistsummarypage">
    @if (Model.Items.Count > 0)
    {
        <div class="wishlist-content">
            @if (Model.Warnings.Count > 0)
                {
                <div class="message-error">
                    <ul>
                        @foreach (var warning in Model.Warnings)
                    {
                            <li>@warning</li>
                        }
                    </ul>
                </div>
            }
            @using (Html.BeginRouteForm("Wishlist", FormMethod.Post, new { id = "wishlist-form" }))
            {
                var first = true;
                @Html.AntiForgeryToken()
                <div class="product-list cart">
                    @foreach (var item in Model.Items)
                    {
                        <div class="slide-product @(first?"active":"")">
                            <div class="card">
                                @if (Model.IsEditable)
                            {
                                if (Model.ShowProductImages)
                                {
                            <div class="card__img" style="background-image: url(@(@item.Picture.ImageUrl));" id="@item.Id">
                            </div>
                                }

                            <div class="remove-from-cart">
                                <button type="button" class="remove-product deletewishlistitem" data-href="@Url.RouteUrl("DeleteWishlistItem", new { id = item.Id })">
                                    <img src="~/Themes/DefaultClean/Content/images/remove.png" alt="Delete Product" class="remove" />
                                </button>
                            </div>
                            }
                                @if (Model.DisplayAddToCart)
                            {

                            <div class="add-to-cart">
                                <button type="button" class="add-product-to-wishlist addcartfromwwishlist" data-href="@Url.RouteUrl("AddWishlistItemToCart", new {  id = item.Id})">
                                    <img src="~/Themes/DefaultClean/Content/images/shopping-bag.png" alt="@T("ShoppingCart.AddToCart")" class="add-to-bag" />
                                </button>
                            </div>
                            }

                                <div class="product card__content">
                                    <a href="@Url.RouteUrl("Product", new { SeName = item.ProductSeName })" class="product-name card__content-header">@item.ProductName</a>
                                    @if (!String.IsNullOrEmpty(item.AttributeInfo))
                                {
                                <div class="attributes">
                                    @Html.Raw(item.AttributeInfo)
                                </div>
                                }
                                    @if (item.VendorId > 0)
                                {
                                <div class="store-name">
                                    <em>
                                        Store: <a href="@Url.RouteUrl("Vendor", new { SeName = item.VendorSeName })" class="product-name">@item.VendorName</a>
                                    </em>
                                </div>
                                }
                                    @if (!String.IsNullOrEmpty(item.RecurringInfo))
                                {
                                <div class="recurring-info">
                                    @Html.Raw(item.RecurringInfo)
                                </div>
                                }
                                    @if (!String.IsNullOrEmpty(item.RentalInfo))
                                {
                                <div class="rental-info">
                                    @Html.Raw(item.RentalInfo)
                                </div>
                                }
                                    @if (Model.IsEditable && item.AllowItemEditing)
                                {
                                    var editCartItemUrl = Url.RouteUrl("Product", new { SeName = item.ProductSeName });
                                    editCartItemUrl = webHelper.ModifyQueryString(editCartItemUrl, "updatecartitemid=" + item.Id, null);
                                <div class="edit-item">
                                    <a href="@editCartItemUrl">@T("Common.Edit")</a>
                                </div>
                                }
                                    @if (item.Warnings.Count > 0)
                                {
                                <div class="message-error">
                                    <ul>
                                        @foreach (var warning in item.Warnings)
                                            {
                                            <li>@warning</li>
                                            }
                                    </ul>
                                </div>
                                }
                                    <div class="unit-price">
                                        <label class="td-title">@T("ShoppingCart.UnitPrice"):</label>
                                        <span class="product-unit-price">@item.UnitPrice</span>
                                    </div>
                                    @if (Model.IsEditable)
                                {
                                    if (item.AllowedQuantities.Count > 0)
                                    {
                                <div class="quantity">
                                    <label class="td-title">@T("ShoppingCart.Quantity"):</label>
                                    <select id="itemquantity@(item.Id)" name="itemquantity@(item.Id)" class="qty-dropdown" onchange="ChangeWishlist()">
                                        @foreach (var qty in item.AllowedQuantities)
                                                {
                                                <option id="itemquantity@(item.Id)" selected="@qty.Selected" value="@qty.Value">@qty.Value</option>
                                                }
                                    </select>
                                </div>
                                    }
                                    else
                                    {
                                <div class="quantity">
                                    <div style="display:inline-flex">
                                        <div class="minus" onclick="$(this).parent().find('.qty-input').attr('value', function (i, oldval) {if(oldval>1){ return --oldval; } else { return oldval}}).trigger('change')"></div>
                                        <input id="itemquantity@(item.Id)" name="itemquantity@(item.Id)" type="text" value="@(item.Quantity)" onchange="ChangeWishlist()" class="qty-input form-control text-center" />
                                        <div class="plus" onclick="$(this).parent().find('.qty-input').attr('value',function (i, oldval) {return ++oldval;}).trigger('change')"></div>
                                    </div>
                                </div>
                                    }
                                }
                                else
                                {
                                <div class="quantity">
                                    <input id="itemquantity@(item.Id)" name="itemquantity@(item.Id)" type="text" value="@(item.Quantity)" class="product-quantity" readonly />
                                </div>
                                }
                                    <div class="subtotal">
                                        <label class="td-title">@T("ShoppingCart.ItemTotal"):</label>
                                        <span class="product-subtotal">@item.SubTotal</span>
                                        @if (!String.IsNullOrEmpty(item.Discount))
                                    {
                                    <div class="discount">
                                        @T("ShoppingCart.ItemYouSave", item.Discount)
                                    </div>
                                        if (item.MaximumDiscountedQty.HasValue)
                                        {
                                    <div class="discount-additional-info">
                                        @T("ShoppingCart.MaximumDiscountedQty", item.MaximumDiscountedQty.Value)
                                    </div>
                                        }
                                    }
                                    </div>
                                </div>

                            </div>
                          
                        </div>
                        first = false;
                    }

                    <div class="prevnext">
                        <button type="button" class="prevnext-button" id="prev-product"></button>
                        <button type="button" class="prevnext-button" id="next-product"></button>
                    </div>

                    <script type="text/javascript">
                        $(document).ready(function () {
                            var $activeSlide = $(".active"),
                                $homeSlide = $(".slide-product"),
                                $slideNavPrev = $("#prev-product"),
                                $slideNavNext = $("#next-product");

                            function init() {
                                TweenMax.set($homeSlide.not($activeSlide), { autoAlpha: 0 });
                                TweenMax.set($slideNavPrev, { autoAlpha: 0.2 });
                            }
                            init();

                            $('.product-list').on('mousewheel', function (e) {
                                if (e.originalEvent.wheelDelta > 0) {
                                    $slideNavPrev.click();
                                }
                                else {
                                    $slideNavNext.click();
                                }
                            });

                            function goToNextSlide(slideOut, slideIn, slideInAll) {
                                var tl = new TimelineLite({ onStart: disablePrev, onComplete: enablePrev }),
                                    slideOutContent = slideOut.find('.card__content'),
                                    slideInContent = slideIn.find('.card__content'),
                                    slideOutImg = slideOut.find('.card__img'),
                                    slideInImg = slideIn.find('.card__img'),
                                    index = slideIn.index(),
                                    size = $homeSlide.length;

                                if (slideIn.length !== 0) {

                                    tl
                                        .set(slideIn, { autoAlpha: 1, className: '+=active' })
                                        .set(slideOut, { className: '-=active' })
                                        .to(slideOutContent, 0.65, { y: '+=40px', ease: Power3.easeInOut }, 0)
                                        .to(slideOutImg, 0.65, { backgroundPosition: 'bottom', ease: Power3.easeInOut }, 0)
                                        .to(slideInAll, 1, { y: '-=100%', ease: Power3.easeInOut }, 0)
                                        .fromTo(slideInContent, 0.65, { y: '-=40px' }, { y: 0, ease: Power3.easeInOut }, "-=0.7")
                                        .fromTo(slideInImg, 0.65, { backgroundPosition: 'top' }, { backgroundPosition: 'bottom', ease: Power3.easeInOut }, "-=0.7")
                                }

                                TweenMax.set($slideNavPrev, { autoAlpha: 1 });

                                if (index === size - 1) {
                                    TweenMax.to($slideNavNext, 0.3, { autoAlpha: 0.2, ease: Linear.easeNone });
                                }
                            };
                          
                            function goToPreviousSlide(slideOut, slideIn, slideInAll) {
                                var tl = new TimelineLite({ onStart: disablePrev, onComplete: enablePrev }),
                                    slideOutContent = slideOut.find('.card__content'),
                                    slideInContent = slideIn.find('.card__content'),
                                    slideOutImg = slideOut.find('.card__img'),
                                    slideInImg = slideIn.find('.card__img'),
                                    index = slideIn.index(),
                                    size = $homeSlide.length;

                                if (slideIn.length !== 0) {

                                    tl
                                        .set(slideIn, { autoAlpha: 1, className: '+=active' })
                                        .set(slideOut, { className: '-=active' })
                                        .to(slideOutContent, 0.65, { y: '-=40px', ease: Power3.easeInOut }, 0)
                                        .to(slideOutImg, 0.65, { backgroundPosition: 'top', ease: Power3.easeInOut }, 0)
                                        .to(slideInAll, 1, { y: '+=100%', ease: Power3.easeInOut }, 0)
                                        .fromTo(slideInContent, 0.65, { y: '+=40px' }, { y: 0, ease: Power3.easeInOut }, "-=0.7")
                                        .fromTo(slideInImg, 0.65, { backgroundPosition: 'bottom' }, { backgroundPosition: 'top', ease: Power3.easeInOut }, "-=0.7")
                                }

                                TweenMax.set($slideNavNext, { autoAlpha: 1 });

                                if (index === 0) {
                                    TweenMax.to($slideNavPrev, 0.3, { autoAlpha: 0.2, ease: Linear.easeNone });
                                }
                            };

                            function disablePrev() {
                                $slideNavPrev.unbind("click");
                                $slideNavNext.unbind("click");
                            }

                            function enablePrev() {
                                $slideNavPrev.bind("click", Previous);
                                $slideNavNext.bind("click", Next);
                            }

                            $slideNavNext.click(function (e) {
                                Next();
                            });

                            $slideNavPrev.click(function (e) {
                                Previous();
                            });

                            function Previous() {
                                var slideOut = $('.slide-product.active'),
                                    slideIn = $('.slide-product.active').prev('.slide-product'),
                                    slideInAll = $('.slide-product');

                                goToPreviousSlide(slideOut, slideIn, slideInAll);
                            };
                            function Next() {
                                var slideOut = $('.slide-product.active'),
                                    slideIn = $('.slide-product.active').next('.slide-product'),
                                    slideInAll = $('.slide-product');

                                goToNextSlide(slideOut, slideIn, slideInAll);
                            };
                           
                        });
                    </script>
                </div>
                if (Model.Items.Count > 0 && Model.DisplayTaxShippingInfo)
                {
                    var inclTax = EngineContext.Current.Resolve<IWorkContext>
                        ().TaxDisplayType == TaxDisplayType.IncludingTax;
                    //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                    //of course, you can modify appropriate locales to include VAT info there
                    <div class="tax-shipping-info">
                        @T(inclTax ? "Wishlist.TaxShipping.InclTax" : "Wishlist.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                    </div>
                }

            }
        </div>
    }
    else
    {
        <header class="sniper" style="top: 0px;">
            <span></span>
            <h1>@T("Wishlist.CartIsEmpty")</h1>
        </header>
    }
    <script>

    function ChangeWishlist() {
                $.ajax({
                    cache: false,
                    type: "POST",
                    data: $('#wishlist-form').serialize(),
                    url: '@Url.RouteUrl("UpdateWishlist")',
                    success: function (data) {
                        $(AjaxCart.topwishlistselector).html(data.totalproducts);
                        $('#wishlistsummarypage').replaceWith(data.wishlist);
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve Wishlist Page.');
                    }
                });
            }

        $(document).ready(function () {
            $(".deletewishlistitem").click(function () {
                var href = $(this).closest('[data-href]').data('href');
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: href,
                    success: function (data) {
                        $(AjaxCart.topwishlistselector).html(data.totalproducts);
                        $('#wishlistsummarypage').replaceWith(data.wishlist);
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve Wishlist Page.');
                    }
                });
            });
        });
        $(document).ready(function () {
            $(".addcartfromwwishlist").click(function () {
                var href = $(this).closest('[data-href]').data('href');
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: href,
                    success: function (data) {
                        $(AjaxCart.topwishlistselector).html(data.totalproducts);
                        $('#wishlistsummarypage').replaceWith(data.wishlist);
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve Wishlist Page.');
                    }
                });
            });
        });
    </script>

</div>
