@model LoginModel
@using Nop.Web.Models.Customer;
@using Nop.Core;
@using Nop.Core.Infrastructure;
@{
    Layout = "~/Views/Shared/_ColumnsTwo.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Login").Text);
    //page class
    Html.AppendPageCssClassParts("html-login-page");

    //register URL with return URL (if specified)
    var registerUrl = Url.RouteUrl("Register");
    if (!String.IsNullOrEmpty(this.Context.Request.QueryString["returnUrl"]))
    {
        var webHelper = EngineContext.Current.Resolve<IWebHelper>();
        registerUrl = webHelper.ModifyQueryString(registerUrl, "returnurl=" + HttpUtility.UrlEncode(this.Context.Request.QueryString["returnUrl"]), null);
    }
}

@section left
{
    <div class="logo"></div>
    <h1>@T("Account.Login.Welcome")</h1>
    @if (Model.CheckoutAsGuest)
    {
        <p>@T("Account.Login.CheckoutAsGuestOrRegister")</p>
        <p>@Html.Action("TopicBlock", "Topic", new { systemName = "CheckoutAsGuestOrRegister" })</p>
        <a class="hire btn btn-cross" href="@Url.RouteUrl("Checkout")">
            <span>@T("Account.Login.CheckoutAsGuest")</span>
        </a>
        <a class="hire btn btn-cross" href="@registerUrl">
            <span>@T("Account.Register")</span>
        </a>
    }
    else
    {
        <p>@T("Account.Login.NewCustomer")</p>
        <p>@T("Account.Login.NewCustomerText")</p>
        <a class="hire btn btn-cross" href="@registerUrl">
            <span>@T("Account.Register")</span>
        </a>
    }
    <span class="down"></span>
}
<div class="vcenter">
    <header class="sniper">
        <span></span>
        <h2>
            RETURNING <br />
            CUSTOMER
        </h2>
    </header>
    @Html.Partial("_ExternalAuthentication.AssociateMessage")
    @Html.Partial("_ExternalAuthentication.Errors")
    @using (Html.BeginForm())
    {
        var validationSummary = Html.ValidationSummary(true, T("Account.Login.Unsuccessful").Text);
        if (!MvcHtmlString.IsNullOrEmpty(validationSummary))
        {
            <div class="message-error">@validationSummary</div>
        }
        <div class="form-fields">
            @if (Model.UsernamesEnabled)
            {
                <div class="inputs">
                    @Html.LabelFor(m => m.Username, new { }, ":")
                    @Html.TextBoxFor(m => m.Username, new { @class = "username", autofocus = "autofocus" })
                    @Html.ValidationMessageFor(m => m.Username)
                </div>
            }
            else
            {
                <div class="inputs">
                    @Html.LabelFor(m => m.Email, new { }, ":")
                    @Html.TextBoxFor(m => m.Email, new { @class = "email", autofocus = "autofocus" })
                    @Html.ValidationMessageFor(m => m.Email)
                </div>
            }
            <div class="inputs">
                @Html.LabelFor(m => m.Password, new { }, ":")
                @Html.PasswordFor(m => m.Password, new { @class = "password" })
                @Html.ValidationMessageFor(m => m.Password)
                <span class="forgot-password">
                    @Html.RouteLink(T("Account.Login.ForgotPassword").Text, "PasswordRecovery")
                </span>
            </div>
            <div class="inputs reversed">
                @Html.CheckBoxFor(m => m.RememberMe)
                @Html.LabelFor(m => m.RememberMe)
                
            </div>
            @if (Model.DisplayCaptcha)
            {
                <div class="captcha-box">
                    @Html.Raw(Html.GenerateCaptcha())
                </div>
            }
        </div>
        <div class="btn btn-stripe buttons">
            <input class="login-button" type="submit" value="@T("Account.Login.LoginButton")">
        </div>
    }
    <div class="external-authentication">
        @Html.Action("ExternalMethods", "ExternalAuthentication")
    </div>
    @Html.Action("TopicBlock", "Topic", new { systemName = "LoginRegistrationInfo" })
</div>