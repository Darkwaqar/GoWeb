@using Nop.Core
@using Nop.Core.Infrastructure
@using Nop.Services.Configuration

@{
    Layout = "~/Views/Shared/_Root.cshtml";
}
@{
    var controllerName = Url.RequestContext.RouteData.Values["controller"].ToString();
    var actionName = Url.RequestContext.RouteData.Values["action"].ToString();

    var currentController = Url.RequestContext.RouteData.Values["controller"].ToString();
    var currentAction = Url.RequestContext.RouteData.Values["action"].ToString();


    //current category ID
    int currentCategoryId = 0;
    if (controllerName.Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        actionName.Equals("category", StringComparison.InvariantCultureIgnoreCase))
    {
        currentCategoryId = Convert.ToInt32(Url.RequestContext.RouteData.Values["categoryId"].ToString());
    }

    //current manufacturer ID
    int currentManufacturerId = 0;
    if (controllerName.Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        actionName.Equals("manufacturer", StringComparison.InvariantCultureIgnoreCase))
    {
        currentManufacturerId = Convert.ToInt32(Url.RequestContext.RouteData.Values["manufacturerId"].ToString());
    }

    //current product ID
    int currentProductId = 0;
    if (controllerName.Equals("product", StringComparison.InvariantCultureIgnoreCase) &&
        actionName.Equals("productdetails", StringComparison.InvariantCultureIgnoreCase))
    {
        currentProductId = Convert.ToInt32(Url.RequestContext.RouteData.Values["productId"].ToString());
    }

    var settingsService = EngineContext.Current.Resolve<ISettingService>();

    var storeId = EngineContext.Current.Resolve<IStoreContext>().CurrentStore.Id;
    var catalogPagesLayout = settingsService.GetSettingByKey("tiffanythemesettings.catalogpageslayout", String.Empty, storeId, true);
    var isVendorInfo = controllerName.Equals("vendor", StringComparison.InvariantCultureIgnoreCase) && actionName.Equals("review-center", StringComparison.InvariantCultureIgnoreCase);

    bool isOneColumn = false;
    if (String.Compare(catalogPagesLayout, "one-column", true) == 0)
    {
        isOneColumn = true;
    }

    if (controllerName.Equals("customer", StringComparison.InvariantCultureIgnoreCase) ||
        controllerName.Equals("order", StringComparison.InvariantCultureIgnoreCase) ||
        controllerName.Equals("blog", StringComparison.InvariantCultureIgnoreCase) ||
        controllerName.Equals("returnrequest", StringComparison.InvariantCultureIgnoreCase) ||
         (controllerName.Equals("backinstocksubscription", StringComparison.InvariantCultureIgnoreCase) &&
        actionName.Equals("customersubscriptions", StringComparison.InvariantCultureIgnoreCase)) ||
        (controllerName.Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        actionName.Equals("producttagsall", StringComparison.InvariantCultureIgnoreCase)) ||
        controllerName.Equals("helpdesk", StringComparison.InvariantCultureIgnoreCase)||
        controllerName.Equals("vendor", StringComparison.InvariantCultureIgnoreCase))
    {
        isOneColumn = false;
    }

    var categoryNavigationEnabled = settingsService.GetSettingByKey("tiffanythemesettings.defaultcategorynavigationenabled", false, storeId, true);
    var manufacturerNavigationEnabled = settingsService.GetSettingByKey("tiffanythemesettings.defaultmanufacturernavigationenabled", false, storeId, true);
    var vendorNavigationEnabled = settingsService.GetSettingByKey("tiffanythemesettings.defaultvendornavigationenabled", false, storeId, true);
}

@section breadcrumb
{
    @if (IsSectionDefined("breadcrumbInner"))
    {
        @RenderSection("breadcrumbInner");
    }
}

@if (IsSectionDefined("subcategories"))
{
    @RenderSection("subcategories");
}

@if (isOneColumn)
{
    <div class="center-1">
        @Html.Widget("main_column_before")

        @if (categoryNavigationEnabled)
        {
            @Html.Action("CategoryNavigation", "Catalog", new { currentCategoryId = currentCategoryId, currentProductId = currentProductId })
        }

        @if (manufacturerNavigationEnabled)
        {
            @Html.Action("ManufacturerNavigation", "Catalog", new { currentManufacturerId = currentManufacturerId })
        }

        @if (vendorNavigationEnabled)
        {
            @Html.Action("VendorNavigation", "Catalog")
        }

        @RenderBody()

       @*@Html.Action("PopularProductTags", "Catalog")*@

        @Html.Action("PollBlock", "Poll", new { systemKeyword = "LeftColumnPoll" })

        @Html.Widget("main_column_after")
    </div>
}
else
{
    <div class="center-2">
        @Html.Widget("main_column_before")
        @RenderBody()
        @Html.Widget("main_column_after")
    </div>
    <div class="side-2">
        @if (IsSectionDefined("left"))
        {
            @RenderSection("left")
        }
        else
        {
            @Html.Widget("left_side_column_before")
            if (categoryNavigationEnabled)
            {
                @Html.Action("CategoryNavigation", "Catalog", new { currentCategoryId = currentCategoryId, currentProductId = currentProductId })
            }
            @Html.Widget("left_side_column_after_category_navigation")
            if (manufacturerNavigationEnabled)
            {
                @Html.Action("ManufacturerNavigation", "Catalog", new { currentManufacturerId = currentManufacturerId })
            }
            if (vendorNavigationEnabled)
            {
                @Html.Action("VendorNavigation", "Catalog")
            }
            @Html.Action("RecentlyViewedProductsBlock", "Product", new { productThumbPictureSize = 32 })
            @Html.Action("PopularProductTags", "Catalog")
            @Html.Action("PollBlock", "Poll", new { systemKeyword = "LeftColumnPoll" })
            @Html.Widget("left_side_column_after")
        }
    </div>
}