@using Nop.Core
@using Nop.Core.Infrastructure
@using Nop.Services.Configuration
@using Nop.Web.Models.Newsletter

@model NewsletterBoxModel

@{
    var storeId = EngineContext.Current.Resolve<IStoreContext>().CurrentStore.Id;
    var settingService = EngineContext.Current.Resolve<ISettingService>();
    var isNewsletterPluginEnabledAsWidget = settingService.GetSettingByKey("widgetsettings.activewidgetsystemnames", string.Empty, storeId, true).Contains("SevenSpikes.Nop.Plugins.NewsletterPopup");
    var isNewsletterPluginEnabled = settingService.GetSettingByKey("newsletterpopupsettings.enabled", false, storeId, true);
}

<div class="footer-newsletter">
    @if (isNewsletterPluginEnabledAsWidget && isNewsletterPluginEnabled)
    {
        <p class="subscribe-text">@T("Newsletter.Title")</p>
        <button class="btn-subscribe newsletter-box-button" type="button">@T("Newsletter.Options.Subscribe")</button>
    }
    else
    {
        @*<p class="subscribe-text">@T("Newsletter.Title")</p>*@
        <h1 class="title"> Newsletter Subscription </h1>
        <p class="subscribe-text">
            Subscribe to our Newsletter to be the first to know about new items and upcoming promotions!
        </p>
        <div class="newsletter-subscribe" id="newsletter-subscribe-block">
            <div class="newsletter-email">
                @* Newsletter.Email.Placeholder *@
                @Html.TextBoxFor(x => x.NewsletterEmail, new { id = "newsletter-email", @class = "newsletter-subscribe-text", placeholder = T("sadafamir.ContactUs.Email.Hint") })

                <input type="button" value="@T(Model.AllowToUnsubscribe ? "Newsletter.Options.Send" : "Newsletter.Options.Subscribe")" id="newsletter-subscribe-button" class="button-1 newsletter-subscribe-button" />
                @if (Model.AllowToUnsubscribe)
                {
                    <ul class="options">
                        <li class="options-item subscribe">
                            <input id="newsletter_subscribe" type="radio" value="newsletter_subscribe" name="newsletter_block" checked="checked" />
                            <label for="newsletter_subscribe">@T("Newsletter.Options.Subscribe")</label>
                        </li>
                        <li class="options-item unsubscribe">
                            <input id="newsletter_unsubscribe" type="radio" value="newsletter_unsubscribe" name="newsletter_block" />
                            <label for="newsletter_unsubscribe">@T("Newsletter.Options.Unsubscribe")</label>
                        </li>
                    </ul>
                }
            </div>
            <div class="newsletter-validation">
                <span id="subscribe-loading-progress" style="display: none;" class="please-wait">@T("Common.Wait...")</span>
                @Html.ValidationMessageFor(x => x.NewsletterEmail)
            </div>
        </div>
        <div class="newsletter-result" id="newsletter-result-block"></div>
        <script type="text/javascript">
            function newsletter_subscribe(subscribe) {
                var subscribeProgress = $("#subscribe-loading-progress");
                subscribeProgress.show();
                var postData = {
                    subscribe: subscribe,
                    email: $("#newsletter-email").val()
                };
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.RouteUrl("SubscribeNewsletter"))",
                    data: postData,
                    success: function (data) {
                        subscribeProgress.hide();
                        $("#newsletter-result-block").html(data.Result);
                        if (data.Success) {
                            $('#newsletter-subscribe-block').hide();
                            $('#newsletter-result-block').removeClass("failure").addClass("success").show();
                        } else {
                            $('#newsletter-result-block').removeClass("success").addClass("failure").fadeIn("slow").delay(2000).fadeOut("slow");
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to subscribe.');
                        subscribeProgress.hide();
                    }
                });
            }

            $(document).ready(function () {
                $('#newsletter-subscribe-button').click(function () {
                    @if (Model.AllowToUnsubscribe)
                    {
                        <text>if ($('#newsletter_subscribe').is(':checked')) {
                        newsletter_subscribe('true');
                    } else {
                        newsletter_subscribe('false');
                    }</text>
                    }
                    else
                    {
                        <text>newsletter_subscribe('true');</text>
                    }
                });
                $("#newsletter-email").keydown(function (event) {
                    if (event.keyCode == 13) {
                        $("#newsletter-subscribe-button").click();
                        return false;
                    }
                });
            });
        </script>
    }
</div>
