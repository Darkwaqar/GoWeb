@model InteractiveFormModel
<script>
    $(document).ready(function () {
        bindBootstrapTabSelectEvent('interactiveForms-edit');
    });
</script>

<div class="content">
    <div class="form-horizontal">
        <div class="row">
            <div class="col-md-12 clearfix">
                <div class="pull-left">
                    @Html.Action("Mode", "Setting", new { modeName = "interactiveForms-advanced-mode" })
                </div>
            </div>
        </div>
        <div id="interactiveForms-edit" class="nav-tabs-custom">
            <ul class="nav nav-tabs">
                @Html.RenderBootstrapTabHeader("tab-info", @T("Admin.Promotions.InteractiveForms.Info"), true)
                @Html.RenderBootstrapTabHeader("tab-attribute", @T("Admin.Promotions.InteractiveForms.Attribute"), customCssClass: "advanced-setting")
            </ul>
            <div class="tab-content">
                @Html.RenderBootstrapTabContent("tab-info", @TabInfo(), true)
                @Html.RenderBootstrapTabContent("tab-attribute", @TabAttribute())
            </div>
        </div>
    </div>
</div>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "interactiveForms-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}

@*save selected tab name*@
<input type="hidden" id="selected-tab-name" name="selected-tab-name" value="@(Html.GetSelectedTabName())">
@helper TabInfo()
{
    @Html.HiddenFor(model => model.Id)
    <div class="panel-group">
        <div class="panel panel-default">
            <div class="panel panel-body">
                @(Html.LocalizedEditor<InteractiveFormModel, InteractiveFormLocalizedModel>("InteractiveForm-localized",
                @<div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.Locales[item].Name)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.Locales[item].Name)
                            @Html.ValidationMessageFor(model => model.Locales[item].Name)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.Locales[item].Body)
                        </div>
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Locales[item].Body, "RichEditor")
                            @Html.ValidationMessageFor(model => model.Locales[item].Body)
                        </div>
                    </div>
                    @Html.HiddenFor(model => model.Locales[item].LanguageId)
                </div>
                ,
                @<div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.Name)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.Name, required: true)
                            @Html.ValidationMessageFor(model => model.Name)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.Body)
                        </div>
                        <div class="col-md-9">
                            @Html.EditorFor(x => x.Body, "RichEditor")
                            @Html.ValidationMessageFor(model => model.Body)
                        </div>
                    </div>
                </div>
                  ))
                <div class="form-group">

                    <script type="text/javascript">
                            function toggleLoadedAvailableTokens() {
                                $('#pnlAvailableTokens').toggle();
                                if ($('#pnlAvailableTokens').css('display') == 'none') {
                                    $('#availableTokensShowHide').html('@T("Admin.Common.Show")');
                                } else {
                                    $('#availableTokensShowHide').html('@T("Admin.Common.Hide")');
                                }
                            }
                    </script>

                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.AvailableTokens)
                    </div>
                    <div class="col-md-9">
                        <a id="availableTokensShowHide" href="javascript:toggleLoadedAvailableTokens();">@T("Admin.Common.Show")</a>
                        <div id="pnlAvailableTokens" style="display: none">
                            @Html.NopDisplayFor(model => model.AvailableTokens)
                        </div>
                    </div>
                </div>

                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.EmailAccountId)
                </div>
                <div class="col-md-9">
                    @Html.NopDropDownListFor(model => model.EmailAccountId, Model.AvailableEmailAccounts)
                    @Html.ValidationMessageFor(model => model.Name)
                </div>
            </div>
        </div>
    </div>

}


@helper TabAttribute()
{
    <div class="panel-group">
        @if (Model.Id > 0)
        {
            <div class="panel panel-default">
                <div class="panel-body">
                    @{
                        var defaultGridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
                        var gridPageSizes = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;
                    }

                    <div id="interactiveformattributes-grid"></div>

                    <script>
                        $(document).ready(function() {
                            $("#interactiveformattributes-grid").kendoGrid({
                                dataSource: {
                                    type: "json",
                                    transport: {
                                        read: {
                                            url: "@Html.Raw(Url.Action("List", "InteractiveFormAttribute", new { InteractiveFormId = Model.Id}))",
                                            type: "POST",
                                            dataType: "json",
                                            data: addAntiForgeryToken
                                        },
                                        destroy: {
                                            url: "@Html.Raw(Url.Action("Delete", "InteractiveFormAttribute", new { interactiveFormId = Model.Id }))",
                                            type: "POST",
                                            dataType: "json",
                                            data: addAntiForgeryToken
                                        }
                                    },
                                    schema: {
                                        data: "Data",
                                        total: "Total",
                                        errors: "Errors",
                                        model: {
                                            id: "Id",
                                            fields: {
                                                Name: { editable: false, type: "string" },
                                                Type: { editable: false, type: "string" },
                                                Id: { editable: false, type: "number" }
                                            }
                                        }
                                    },
                                    requestEnd: function(e) {
                                        if (e.type == "update") {
                                            this.read();
                                        }
                                    },
                                    error: function(e) {
                                        display_kendoui_grid_error(e);
                                        // Cancel the changes
                                        this.cancelChanges();
                                    },
                                    pageSize: @(defaultGridPageSize),
                                    serverPaging: true,
                                    serverFiltering: true,
                                    serverSorting: true
                                },
                                pageable: {
                                    refresh: true,
                                    pageSizes: [@(gridPageSizes)],
                                    @Html.Partial("_GridPagerMessages")
                                },
                                editable: {
                                    confirmation: "@T("Admin.Common.DeleteConfirmation")",
                                    mode: "inline"
                                },
                                scrollable: false,
                                columns: [
                                    {
                                        field: "Name",
                                        title: "@T("Admin.Promotions.InteractiveForms.Attribute.Fields.Name")"
                                    }, {
                                        field: "SystemName",
                                        title: "@T("Admin.Promotions.InteractiveForms.Attribute.Fields.SystemName")",
                                    }, {
                                        field: "AttributeControlTypeName",
                                        title: "@T("Admin.Promotions.InteractiveForms.Attribute.Fields.FormControlTypeId")",
                                        width: 200
                                    }, {
                                        field: "InteractiveFormId",
                                        title: "@T("Admin.Common.View")",
                                        width: 100,
                                        headerAttributes: { style: "text-align:center" },
                                        attributes: { style: "text-align:center" },
                                        template: '<a class="btn btn-default" href="@Url.Content("~/Admin/InteractiveFormAttribute/Edit")?interactiveFormId=@(Model.Id)&interactiveFormAttributeId=#=Id#"#=SystemName#><i class="fa fa-eye"></i>@T("Admin.Common.View")</a>'
                                    }, {
                                        command: [
                                            {
                                                name: "destroy",
                                                text: "@T("Admin.Common.Delete")",
                                            }
                                        ],
                                        width: 200
                                    }
                                ]
                            });
                        });
                    </script>
                </div>

                <div class="panel-footer">
                    <button type="submit" id="btnAddNewValue" onclick="javascript:setLocation('@(Url.Action("Create", "InteractiveFormAttribute", new { interactiveFormId = Model.Id }))'); return false;" class="k-button"><i class="fa fa-plus"></i>&nbsp;@T("Admin.Promotions.InteractiveForms.Attribute.AddNew")</button>
                </div>
            </div>
                        }
                        else
                        {
                            <div class="panel panel-default">
                                <div class="panel-body">
                                    @T("Admin.Promotions.InteractiveForms.SaveBeforeEdit")
                                </div>
                            </div>
                        }
    </div>
}