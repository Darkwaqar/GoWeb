@model BannerModel

@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)

<script>
    $(document).ready(function () {
        bindBootstrapTabSelectEvent('banner-edit');
    });
</script>

<div class="content">
    <div class="form-horizontal">
        <div class="row">
            <div class="col-md-12 clearfix">
                <div class="pull-left">
                    @Html.Action("Mode", "Setting", new { modeName = "banner-advanced-mode" })
                </div>
            </div>
        </div>
        <div id="banner-edit" class="nav-tabs-custom">
            <ul class="nav nav-tabs">
                @Html.RenderBootstrapTabHeader("tab-info", @T("Admin.Catalog.Banners.Info"), true)
                @Html.RenderBootstrapTabHeader("tab-pictures", @T("Admin.Catalog.Banners.Pictures"))
            </ul>
            <div class="tab-content">
                @Html.RenderBootstrapTabContent("tab-info", @TabInfo(), true)
                @Html.RenderBootstrapTabContent("tab-pictures", @TabPictures())
            </div>
        </div>
    </div>
</div>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "banner-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}

@*save selected tab name*@
<input type="hidden" id="selected-tab-name" name="selected-tab-name" value="@(Html.GetSelectedTabName())">
@helper TabInfo(){
    <div class="content">
        <div class="form-horizontal">
            <div class="panel-group">
                <div class="panel panel-default">
                    <div class="panel panel-body">
                        @(Html.LocalizedEditor<BannerModel, BannerLocalizedModel>("banner-localized",
                    @<div>
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.NopLabelFor(model => model.Locales[item].Name)
                            </div>
                            <div class="col-md-9">
                                @Html.NopEditorFor(model => model.Locales[item].Name)
                                @Html.ValidationMessageFor(model => model.Locales[item].Name)
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.NopLabelFor(model => model.Locales[item].Body)
                            </div>
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.Locales[item].Body, "RichEditor")
                                @Html.ValidationMessageFor(model => model.Locales[item].Body)
                            </div>
                        </div>
                        @Html.HiddenFor(model => model.Locales[item].LanguageId)
                    </div>
                ,
                    @<div>
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.NopLabelFor(model => model.Name)
                            </div>
                            <div class="col-md-9">
                                @Html.NopEditorFor(model => model.Name, required: true)
                                @Html.ValidationMessageFor(model => model.Name)
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.NopLabelFor(model => model.Body)
                            </div>
                            <div class="col-md-9">
                                @Html.EditorFor(x => x.Body, "RichEditor")
                                @Html.ValidationMessageFor(model => model.Body)
                            </div>
                        </div>
                    </div>
                  ))
                        <div class="form-group advanced-setting">
                            <div class="col-md-3">
                                @Html.NopLabelFor(model => model.Published)
                            </div>
                            <div class="col-md-9">
                                @Html.NopEditorFor(x => x.Published)
                                @Html.ValidationMessageFor(model => model.Published)
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.NopLabelFor(model => model.DisplayOrder)
                            </div>
                            <div class="col-md-9">
                                @Html.NopEditorFor(model => model.DisplayOrder)
                                @Html.ValidationMessageFor(model => model.DisplayOrder)
                            </div>
                        </div>
                        <div class="form-group advanced-setting" @(Model.IsLoggedInAsVendor ? Html.Raw("style='display: none;'") : null)>
                            <div class="col-md-3">
                                @Html.NopLabelFor(model => model.VendorId)
                            </div>
                            <div class="col-md-9">
                                @Html.NopDropDownListFor(model => model.VendorId, Model.AvailableVendors)
                                @Html.ValidationMessageFor(model => model.VendorId)
                            </div>
                        </div>
                        <div class="form-group advanced-setting">
                            <div class="col-md-3">
                                @Html.NopLabelFor(model => model.SelectedStoreIds)
                            </div>
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.SelectedStoreIds, new { SelectList = Model.AvailableStores })
                                <script>
                                $(document).ready(function() {
                                    var storesIdsInput = $('#@Html.FieldIdFor(model => model.SelectedStoreIds)').data("kendoMultiSelect");
                                    storesIdsInput.setOptions({
                                        autoClose: false
                                    });

                                    @if (Model.AvailableStores.Count == 0)
                            {
                                <text>
                                    storesIdsInput.setOptions({
                                        enable: false,
                                        placeholder: 'No stores available'
                                    });
                                    storesIdsInput._placeholder();
                                    storesIdsInput._enable();
                                    </text>
                            }
                                });
                                </script>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

}
@helper TabPictures()
{
    @Html.Partial("_CreateOrUpdate.Pictures", Model)
}

